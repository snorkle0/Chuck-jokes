{"version":3,"sources":["App.styles.tsx","store/reducers/data.ts","hooks/appHooks.ts","components/common/Controls.styles.tsx","components/common/TextInput.tsx","services/chuckJokes.ts","components/common/Dropdown.tsx","store/reducers/ui.ts","components/common/ActionButton.tsx","components/common/TextArea.tsx","assets/plus.svg","components/common/AddJoke.tsx","assets/minus.svg","components/common/RemoveJoke.tsx","components/common/SaveJokes.tsx","components/common/Controls.tsx","components/current-joke/CurrentJoke.styles.tsx","assets/chuck-norris-photo.png","assets/random-photo.png","components/current-joke/CurrentJoke.tsx","components/saved-jokes/SavedJokes.styles.tsx","components/saved-jokes/SavedJokes.tsx","App.tsx","store/index.ts","index.tsx"],"names":["App","styled","div","Rectangle","dataSlice","createSlice","name","initialState","currentJoke","savedJokes","customPerson","category","reducers","setCurrentJoke","state","action","payload","he","decode","addSavedJoke","id","jokeVal","deleteSavedJoke","omit","setCustomPerson","setCategory","dataActions","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","ControlContainer","TextInput","dispatch","person","data","TextField","label","fullWidth","value","onChange","event","target","variant","chuckJokesApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getRandomJoke","query","params","split","length","transformResponse","response","joke","getJokeCategories","useGetRandomJokeQuery","useGetJokeCategoriesQuery","Dropdown","React","useState","categories","setCategories","error","isLoading","useEffect","FormControl","sx","textAlign","InputLabel","Select","labelId","map","item","MenuItem","capitalize","uiSlice","queryParams","timesFetched","setQueryParams","uiActions","ColorButton","Button","color","theme","palette","getContrastText","blueGrey","backgroundColor","fontSize","textTransform","ActionButton","ui","style","padding","onClick","TextArea","AddJoke","currentJokesAmount","Object","keys","IconButton","src","Plus","alt","RemoveJoke","Minus","grey","Controls","SaveJokes","element","document","createElement","savedJokesString","JSON","stringify","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","Image","img","CurrentJoke","RandomPhoto","ChuckNorrisPhoto","AddRemoveContainer","SaveContainer","SavedJokes","store","configureStore","reducer","dataReducer","uiReducer","middleware","getDefaultMiddleware","concat","setupListeners","rootEl","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c050cb1c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const App = styled.div `\r\n  text-align: center;\r\n  width: 900px;\r\n  height: 900px;\r\n  margin: auto;\r\n  display: flex;\r\n  padding: 98px 443px 98px 442px;\r\n  background-color: #f9f9f9;`\r\n\r\n\r\nexport const Rectangle = styled.div`\r\n  width: 555px;\r\n  height: 704px;\r\n  padding: 48px 58px 0 58px;\r\n  margin: auto;\r\n  border-radius: 20px;\r\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.08);\r\n  background-color: var(--white);\r\n`\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { omit } from \"lodash\";\r\nimport he from 'he';\r\n\r\ninterface IJokesDict {\r\n  [id: number]: string;\r\n}\r\n\r\ninterface IState {\r\n  currentJoke: string;\r\n  savedJokes: IJokesDict;\r\n  customPerson: string;\r\n  category: string;\r\n}\r\n\r\nconst initialDataState: IState = {\r\n  currentJoke: \"\",\r\n  savedJokes: {},\r\n  customPerson: \"\",\r\n  category: \"\"\r\n};\r\n\r\nconst dataSlice = createSlice({\r\n  name: \"data\",\r\n  initialState: initialDataState,\r\n  reducers: {\r\n    setCurrentJoke(state, action) {\r\n      if (!action.payload) return;\r\n      state.currentJoke = he.decode(action.payload);\r\n    },\r\n    addSavedJoke(state, action) {\r\n      const { id, jokeVal } = action.payload;\r\n      state.savedJokes[id] = jokeVal;\r\n    },\r\n    deleteSavedJoke(state, action) {\r\n      const { id } = action.payload;\r\n      state.savedJokes = omit(state.savedJokes, id);\r\n    },\r\n    setCustomPerson(state, action) {\r\n      state.customPerson = action.payload;\r\n    },\r\n    setCategory(state, action) {\r\n      state.category = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const dataActions = dataSlice.actions;\r\n\r\nexport default dataSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store/index'\r\n\r\n\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import styled from \"styled-components\";\r\n\r\nexport const ControlContainer = styled.div`\r\n  width: 439px;\r\n  height: 58px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  gap: 10px;\r\n  margin: 0 2px 0 0;\r\n  padding: 12px 20px 0 60px;\r\n  background-color: var(--white);\r\n`;\r\n","import React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport { dataActions } from '../../store/reducers/data';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/appHooks';\r\nimport * as S from \"./Controls.styles\";\r\n\r\nconst TextInput = () => {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(dataActions.setCustomPerson(event.target.value));\r\n  };\r\n\r\n  const person = useAppSelector((state) => state.data.customPerson);\r\n\r\n  return (\r\n    <S.ControlContainer>\r\n      <TextField\r\n        id=\"outlined-name\"\r\n        label=\"Impersonate Chuck Norris\"\r\n        fullWidth\r\n        value={person}\r\n        onChange={handleChange}\r\n        variant=\"outlined\"\r\n      />\r\n      </S.ControlContainer>\r\n  );\r\n}\r\n\r\n\r\nexport default TextInput;","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nexport const chuckJokesApi = createApi({\r\n  reducerPath: \"chuckJokesApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"https://api.icndb.com/\" }),\r\n  endpoints: (builder) => ({\r\n    getRandomJoke: builder.query({\r\n      query: (params: any) =>\r\n        `jokes/random?${\r\n          params.person\r\n            ? params.person.split(\" \").length > 0\r\n              ? `firstName=${params.person.split(\" \")[0]}&lastName=${\r\n                  params.person.split(\" \")[1]\r\n                }&`\r\n              : `firstName=${params.person}&`\r\n            : \"\"\r\n        }${params.category.length > 0 ? `limitTo=[${params.category}]` : \"\"}`,\r\n      transformResponse: (response: any) => response.value.joke,\r\n    }),\r\n    getJokeCategories: builder.query({\r\n      query: () => \"categories\",\r\n      transformResponse: (response: any) => response.value,\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetRandomJokeQuery, useGetJokeCategoriesQuery } =\r\n  chuckJokesApi;\r\n","import React from \"react\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\r\nimport { useGetJokeCategoriesQuery } from \"../../services/chuckJokes\";\r\nimport * as S from \"./Controls.styles\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/appHooks\";\r\nimport { dataActions } from \"../../store/reducers/data\";\r\nimport { capitalize } from 'lodash';\r\n\r\nconst Dropdown = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [categories, setCategories] = React.useState([]);\r\n\r\n  const { data, error, isLoading } = useGetJokeCategoriesQuery(\"\");\r\n\r\n  React.useEffect(() => {\r\n    setCategories(data);\r\n  }, [data]);\r\n\r\n  const handleChange = (event: SelectChangeEvent) => {\r\n    dispatch(dataActions.setCategory(event.target.value));\r\n  };\r\n  const category = useAppSelector((state) => state.data.category);\r\n\r\n  return (\r\n    <S.ControlContainer>\r\n      <FormControl fullWidth sx={{textAlign: 'left'}}>\r\n        <InputLabel id=\"dropdownLabel\">Categories</InputLabel>\r\n        <Select\r\n          labelId=\"dropdownLabel\"\r\n          id=\"category\"\r\n          value={category}\r\n          onChange={handleChange}\r\n          label=\"Categories\"\r\n        >\r\n          {categories &&\r\n            categories.map((item: string, id: number) => {\r\n              return (\r\n                <MenuItem key={`item_${id}`} value={item}>\r\n                  {capitalize(item)}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n        </Select>\r\n      </FormControl>\r\n    </S.ControlContainer>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport interface IUIParams {\r\n  timesFetched: number;\r\n  category: string;\r\n  person: string;\r\n}\r\n\r\ninterface state {\r\n  queryParams: IUIParams;\r\n}\r\n\r\nconst initialState: state = {\r\n  queryParams: {\r\n    timesFetched: 0,\r\n    category: \"\",\r\n    person: \"\",\r\n  },\r\n};\r\n\r\nconst uiSlice = createSlice({\r\n  name: \"ui\",\r\n  initialState,\r\n  reducers: {\r\n    setQueryParams(state, action) {\r\n      state.queryParams = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const uiActions = uiSlice.actions;\r\nexport default uiSlice.reducer;\r\n","import React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Button, { ButtonProps } from \"@mui/material/Button\";\r\nimport { blueGrey } from \"@mui/material/colors\";\r\nimport { useAppSelector, useAppDispatch } from \"../../hooks/appHooks\";\r\nimport * as S from \"./Controls.styles\";\r\nimport { uiActions } from \"../../store/reducers/ui\";\r\nimport { IUIParams } from \"../../store/reducers/ui\";\r\nimport { fontSize } from \"@mui/system\";\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n  color: theme.palette.getContrastText(blueGrey[700]),\r\n  backgroundColor: blueGrey[700],\r\n  \"&:hover\": {\r\n    backgroundColor: blueGrey[500],\r\n  },\r\n  fontSize: \"16px\",\r\n  textTransform: \"capitalize\"\r\n}));\r\n\r\nconst ActionButton = () => {\r\n  const dispatch = useAppDispatch();\r\n  const timesFetched = useAppSelector(\r\n    (state) => state.ui.queryParams.timesFetched\r\n  );\r\n  const person = useAppSelector((state) => state.data.customPerson);\r\n  const category = useAppSelector((state) => state.data.category);\r\n\r\n  const onClickHandler = () => {\r\n    const params: IUIParams = {\r\n      timesFetched: timesFetched + 1,\r\n      category,\r\n      person,\r\n    };\r\n    dispatch(uiActions.setQueryParams(params));\r\n  };\r\n\r\n  return (\r\n    <S.ControlContainer style={{padding: '24px 20px 0 60px'}}>\r\n      <ColorButton variant=\"text\" fullWidth onClick={onClickHandler}>\r\n        Draw a random {person ? person : \"Chuck Norris\"} Joke\r\n      </ColorButton>\r\n    </S.ControlContainer>\r\n  );\r\n};\r\n\r\nexport default ActionButton;\r\n","import React from \"react\";\r\nimport { useAppSelector } from \"../../hooks/appHooks\";\r\n\r\nconst TextArea = () => {\r\n  const joke = useAppSelector((state) => state.data.currentJoke);\r\n\r\n  return <div>{joke}</div>;\r\n};\r\n\r\nexport default TextArea;\r\n","export default __webpack_public_path__ + \"static/media/plus.b81c2b22.svg\";","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport AddCircleOutlineOutlinedIcon from \"@mui/icons-material/AddCircleOutlineOutlined\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/appHooks\";\r\nimport { dataActions } from \"../../store/reducers/data\";\r\nimport Plus from '../../assets/plus.svg';\r\n\r\n\r\nconst AddJoke = () => {\r\n  const dispatch = useAppDispatch();\r\n  const joke = useAppSelector((state) => state.data.currentJoke);\r\n  const currentJokesAmount = useAppSelector(\r\n    (state) => Object.keys(state.data.savedJokes).length\r\n  );\r\n  \r\n\r\n  const onClickHandler = () => {\r\n    dispatch(dataActions.addSavedJoke({id: currentJokesAmount, jokeVal: joke}));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={onClickHandler} sx={{padding: '8px 0 0 30px'}}>\r\n        <img src={Plus} alt=\"Add Joke\" />\r\n      </IconButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddJoke;\r\n","export default __webpack_public_path__ + \"static/media/minus.81b0679c.svg\";","import React from \"react\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/appHooks\";\r\nimport { dataActions } from \"../../store/reducers/data\";\r\nimport Minus from \"../../assets/minus.svg\";\r\n\r\nconst RemoveJoke = () => {\r\n  const dispatch = useAppDispatch();\r\n  const currentJokesAmount = useAppSelector(\r\n    (state) => Object.keys(state.data.savedJokes).length\r\n  );\r\n\r\n  const onClickHandler = () => {\r\n    dispatch(dataActions.deleteSavedJoke({ id: currentJokesAmount - 1 }));\r\n  };\r\n  return (\r\n    <>\r\n      <IconButton onClick={onClickHandler} sx={{padding: '8px 30px 0 0'}}>\r\n        <img src={Minus} alt=\"Remove Joke\" />\r\n      </IconButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RemoveJoke;\r\n","import React from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Button, { ButtonProps } from \"@mui/material/Button\";\r\nimport { grey } from \"@mui/material/colors\";\r\nimport { useAppSelector } from \"../../hooks/appHooks\";\r\n\r\nconst ColorButton = styled(Button)<ButtonProps>(({ theme }) => ({\r\n  color: theme.palette.getContrastText(grey[200]),\r\n  backgroundColor: grey[200],\r\n  \"&:hover\": {\r\n    backgroundColor: grey[500],\r\n  },\r\n  fontSize: \"16px\",\r\n  textTransform: \"capitalize\"\r\n}));\r\n\r\nconst SaveJokes = () => {\r\n  const savedJokes = useAppSelector((state) => state.data.savedJokes);\r\n\r\n  const onClickHandler = () => {\r\n    const element = document.createElement(\"a\");\r\n    const savedJokesString = JSON.stringify(savedJokes, null, 2);\r\n    const file = new Blob([savedJokesString], { type: \"text/plain\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"myJokes.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n  };\r\n\r\n  return (\r\n    <ColorButton variant=\"text\" fullWidth onClick={onClickHandler}>\r\n      Save Jokes\r\n    </ColorButton>\r\n  );\r\n};\r\n\r\nexport default SaveJokes;\r\n","import TextInput from \"./TextInput\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport ActionButton from \"./ActionButton\";\r\nimport TextArea from \"./TextArea\";\r\nimport AddJoke from \"./AddJoke\";\r\nimport RemoveJoke from \"./RemoveJoke\";\r\nimport SaveJokes from \"./SaveJokes\";\r\n\r\nconst Controls = {\r\n  TextInput,\r\n  Dropdown,\r\n  ActionButton,\r\n  TextArea,\r\n  AddJoke,\r\n  RemoveJoke,\r\n  SaveJokes\r\n};\r\n\r\nexport default Controls;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n  width: 439px;\r\n  height: 130px;\r\n  margin: 0 0 24px;\r\n  object-fit: contain;\r\n`;\r\n\r\nexport const TextArea = styled.div`\r\n  width: 439px;\r\n  height: 66px;\r\n  margin: 24px 0 32px;\r\n  padding: 0 0 0 60px;\r\n  font-family: Inter-SemiBoldItalic;\r\n  font-size: 19px;\r\n  font-weight: 600;\r\n  font-stretch: normal;\r\n  font-style: italic;\r\n  line-height: normal;\r\n  letter-spacing: normal;\r\n  text-align: left;\r\n  color: var(--dark);\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/chuck-norris-photo.a434412d.png\";","export default __webpack_public_path__ + \"static/media/random-photo.9c55d2b8.png\";","import React from \"react\";\r\nimport * as S from \"./CurrentJoke.styles\";\r\nimport ChuckNorrisPhoto from \"../../assets/chuck-norris-photo.png\";\r\nimport RandomPhoto from \"../../assets/random-photo.png\";\r\nimport { useAppSelector } from \"../../hooks/appHooks\";\r\n\r\nconst CurrentJoke = () => {\r\n  const currentJoke = useAppSelector((state) => state.data.currentJoke);\r\n  const person = useAppSelector((state) => state.data.customPerson);\r\n\r\n\r\n  return (\r\n    <>\r\n      <S.Image src={person? RandomPhoto : ChuckNorrisPhoto}></S.Image>\r\n      <S.TextArea>{currentJoke}</S.TextArea>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentJoke;\r\n","import styled from \"styled-components\";\r\nimport { grey } from \"@mui/material/colors\";\r\n\r\nexport const ControlContainer = styled.div`\r\n  width: 439px;\r\n  height: 58px;\r\n  padding: 16px 16px 16px 60px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 80px 52px 52px 0;\r\n`;\r\n\r\n\r\n\r\nexport const AddRemoveContainer = styled.div`\r\n  width: 145px;\r\n  height: 40px;\r\n  margin: 0 8px 0 0;\r\n  border-radius: 6px;\r\n  background-color: ${grey[200]}\r\n`;\r\n\r\nexport const SaveContainer = styled.div`\r\n  width: 285px;\r\n  margin: 0 2px 0 0;\r\n  object-fit: contain;\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./SavedJokes.styles\";\r\nimport Controls from \"../common/Controls\";\r\nimport { useAppSelector } from \"../../hooks/appHooks\";\r\n\r\nconst SavedJokes = () => {\r\n  const currentJokesAmount = useAppSelector(\r\n    (state) => Object.keys(state.data.savedJokes).length\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <S.ControlContainer>\r\n        <S.AddRemoveContainer>\r\n          <Controls.RemoveJoke />\r\n          {currentJokesAmount}\r\n          <Controls.AddJoke />\r\n        </S.AddRemoveContainer>\r\n        <S.SaveContainer>\r\n          <Controls.SaveJokes />\r\n        </S.SaveContainer>\r\n      </S.ControlContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SavedJokes;\r\n","import React from \"react\";\r\nimport * as S from \"./App.styles\";\r\nimport Controls from \"./components/common/Controls\";\r\nimport \"./App.styles.tsx\";\r\nimport CurrentJoke from \"./components/current-joke/CurrentJoke\";\r\nimport SavedJokes from \"./components/saved-jokes/SavedJokes\";\r\nimport { useGetRandomJokeQuery } from \"./services/chuckJokes\";\r\nimport { useAppDispatch, useAppSelector } from \"./hooks/appHooks\";\r\nimport { dataActions } from \"./store/reducers/data\";\r\n\r\nfunction App() {\r\n\r\n  const queryParams = useAppSelector((state) => state.ui.queryParams);\r\n  const { data, error, isLoading } = useGetRandomJokeQuery(queryParams);\r\n\r\n  const dispatch = useAppDispatch();\r\n  dispatch(dataActions.setCurrentJoke(data));\r\n\r\n  return (\r\n    <S.App>\r\n      <S.Rectangle>\r\n        <CurrentJoke />\r\n        <Controls.Dropdown />\r\n        <Controls.TextInput />\r\n        <Controls.ActionButton />\r\n        <SavedJokes />\r\n      </S.Rectangle>\r\n    </S.App>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport dataReducer from \"./reducers/data\";\r\nimport uiReducer from \"./reducers/ui\";\r\nimport { chuckJokesApi } from \"../services/chuckJokes\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    data: dataReducer,\r\n    ui: uiReducer,\r\n    [chuckJokesApi.reducerPath]: chuckJokesApi.reducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(chuckJokesApi.middleware),\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport default store;\r\n\r\nsetupListeners(store.dispatch);\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index\";\r\n\r\nconst rootEl = document.getElementById(\"root\");\r\n\r\nconst renderApp = () => {\r\n  render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    rootEl\r\n  );\r\n};\r\n\r\nrenderApp();\r\n"],"sourceRoot":""}